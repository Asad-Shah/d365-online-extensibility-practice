/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { IBackgroundImageViewProps } from './background-image';
import { ImageAlignment } from './background-image.props.autogenerated';
import { ProductDimension, AsyncResult, ProductDimensionValue } from '@msdyn365-commerce/retail-proxy';
import { getDimensionValuesAsync } from '@msdyn365-commerce/retail-proxy/dist/DataActions/ProductsDataActions.g';

const _renderImage = (url: string | undefined, altText: string | undefined): JSX.Element => {
    return <img style={{ width: "200px" }} src={url} alt={altText} className='img-fluid p-3' />;
};

const _getData = async (props: IBackgroundImageViewProps) => {
    const { context } = props;
    const recordId = +"68719490634";
    const channelId = context.actionContext.requestContext.apiSettings.channelId;
    const callerContext = context.actionContext;
    const matchingDimensionValues: ProductDimension[] = [];
    const dimensionTypeValue: number = 1;
    return await getDimensionValuesAsync({ callerContext, queryResultSettings: {} }, recordId, channelId, dimensionTypeValue, matchingDimensionValues,
        // @ts-ignore: KitVariantResolution context should be nullable
        null);
}

const onButtonClick = (props: IBackgroundImageViewProps) => {
    return async (event: React.MouseEvent) => {
        try {
            let result: AsyncResult<ProductDimensionValue[]> = await _getData(props);
            console.log(result);
        } catch (error) {
        }
    }
}

export default (props: IBackgroundImageViewProps) => {

    debugger;
    // (async () => {
    //     try {
    //         let result: AsyncResult<ProductDimensionValue[]> = await _getData(props);
    //         console.log(result);
    //     } catch (error) {
    //     }
    // })();


    const { image, bgColor } = props.config;
    if (image?.alignment === ImageAlignment.left) {
        return (
            <div style={{ backgroundColor: bgColor }} className='row align-items-center'>
                <button type='button' onClick={onButtonClick(props)}>Get Data {image?.alignment}</button>
                <div style={{ textAlign: "left" }} className='col-sm-6'>
                    {_renderImage(image?.url, image?.altText)}
                </div>
            </div>
        );
    } else if (image?.alignment === ImageAlignment.right) {
        return (
            <div style={{ backgroundColor: bgColor }} className='row align-items-center'>
                <button type='button' onClick={onButtonClick(props)}>Get Data {image?.alignment}</button>
                <div style={{ textAlign: "right" }} className='col-sm-6'>
                    {_renderImage(image?.url, image?.altText)}
                </div>
            </div>
        );
    }
    else {
        return (
            <div style={{ backgroundColor: bgColor }} className='row align-items-center'>
                <button type='button' onClick={onButtonClick(props)}>Get Data {image?.alignment}</button>
                <div style={{ textAlign: "center" }} className='col-sm-6'>
                    {_renderImage(image?.url, image?.altText)}
                </div>
            </div>
        );
    }

    // return (
    //     <div style={{backgroundColor:bgColor}} className='row align-items-center'>
    //         <div style={{ textAlign: image?.alignment }} className='col-sm-6'>
    //             {_renderImage(image?.url)}
    //         </div>
    //     </div>
    // );
};
